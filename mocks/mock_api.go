// Code generated by MockGen. DO NOT EDIT.
// Source: api.go

// Package mockMessaging is a generated GoMock package.
package mockMessaging

import (
	context "context"
	reflect "reflect"

	messaging "github.com/devlibx/gox-messaging/v2"
	gomock "github.com/golang/mock/gomock"
)

// MockFactory is a mock of Factory interface.
type MockFactory struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryMockRecorder
}

// MockFactoryMockRecorder is the mock recorder for MockFactory.
type MockFactoryMockRecorder struct {
	mock *MockFactory
}

// NewMockFactory creates a new mock instance.
func NewMockFactory(ctrl *gomock.Controller) *MockFactory {
	mock := &MockFactory{ctrl: ctrl}
	mock.recorder = &MockFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFactory) EXPECT() *MockFactoryMockRecorder {
	return m.recorder
}

// GetConsumer mocks base method.
func (m *MockFactory) GetConsumer(name string) (messaging.Consumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConsumer", name)
	ret0, _ := ret[0].(messaging.Consumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConsumer indicates an expected call of GetConsumer.
func (mr *MockFactoryMockRecorder) GetConsumer(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsumer", reflect.TypeOf((*MockFactory)(nil).GetConsumer), name)
}

// GetProducer mocks base method.
func (m *MockFactory) GetProducer(name string) (messaging.Producer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducer", name)
	ret0, _ := ret[0].(messaging.Producer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducer indicates an expected call of GetProducer.
func (mr *MockFactoryMockRecorder) GetProducer(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducer", reflect.TypeOf((*MockFactory)(nil).GetProducer), name)
}

// MarkStart mocks base method.
func (m *MockFactory) MarkStart() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MarkStart")
}

// MarkStart indicates an expected call of MarkStart.
func (mr *MockFactoryMockRecorder) MarkStart() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkStart", reflect.TypeOf((*MockFactory)(nil).MarkStart))
}

// RegisterConsumer mocks base method.
func (m *MockFactory) RegisterConsumer(config messaging.ConsumerConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterConsumer", config)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterConsumer indicates an expected call of RegisterConsumer.
func (mr *MockFactoryMockRecorder) RegisterConsumer(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterConsumer", reflect.TypeOf((*MockFactory)(nil).RegisterConsumer), config)
}

// RegisterProducer mocks base method.
func (m *MockFactory) RegisterProducer(config messaging.ProducerConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterProducer", config)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterProducer indicates an expected call of RegisterProducer.
func (mr *MockFactoryMockRecorder) RegisterProducer(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterProducer", reflect.TypeOf((*MockFactory)(nil).RegisterProducer), config)
}

// Start mocks base method.
func (m *MockFactory) Start(configuration messaging.Configuration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", configuration)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockFactoryMockRecorder) Start(configuration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockFactory)(nil).Start), configuration)
}

// Stop mocks base method.
func (m *MockFactory) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockFactoryMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockFactory)(nil).Stop))
}

// MockProducer is a mock of Producer interface.
type MockProducer struct {
	ctrl     *gomock.Controller
	recorder *MockProducerMockRecorder
}

// MockProducerMockRecorder is the mock recorder for MockProducer.
type MockProducerMockRecorder struct {
	mock *MockProducer
}

// NewMockProducer creates a new mock instance.
func NewMockProducer(ctrl *gomock.Controller) *MockProducer {
	mock := &MockProducer{ctrl: ctrl}
	mock.recorder = &MockProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducer) EXPECT() *MockProducerMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockProducer) Send(ctx context.Context, message *messaging.Message) chan *messaging.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, message)
	ret0, _ := ret[0].(chan *messaging.Response)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockProducerMockRecorder) Send(ctx, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockProducer)(nil).Send), ctx, message)
}

// Stop mocks base method.
func (m *MockProducer) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockProducerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockProducer)(nil).Stop))
}

// MockConsumer is a mock of Consumer interface.
type MockConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerMockRecorder
}

// MockConsumerMockRecorder is the mock recorder for MockConsumer.
type MockConsumerMockRecorder struct {
	mock *MockConsumer
}

// NewMockConsumer creates a new mock instance.
func NewMockConsumer(ctrl *gomock.Controller) *MockConsumer {
	mock := &MockConsumer{ctrl: ctrl}
	mock.recorder = &MockConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumer) EXPECT() *MockConsumerMockRecorder {
	return m.recorder
}

// Process mocks base method.
func (m *MockConsumer) Process(ctx context.Context, consumeFunction messaging.ConsumeFunction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", ctx, consumeFunction)
	ret0, _ := ret[0].(error)
	return ret0
}

// Process indicates an expected call of Process.
func (mr *MockConsumerMockRecorder) Process(ctx, consumeFunction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockConsumer)(nil).Process), ctx, consumeFunction)
}

// Stop mocks base method.
func (m *MockConsumer) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockConsumerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockConsumer)(nil).Stop))
}

// MockConsumeFunction is a mock of ConsumeFunction interface.
type MockConsumeFunction struct {
	ctrl     *gomock.Controller
	recorder *MockConsumeFunctionMockRecorder
}

// MockConsumeFunctionMockRecorder is the mock recorder for MockConsumeFunction.
type MockConsumeFunctionMockRecorder struct {
	mock *MockConsumeFunction
}

// NewMockConsumeFunction creates a new mock instance.
func NewMockConsumeFunction(ctrl *gomock.Controller) *MockConsumeFunction {
	mock := &MockConsumeFunction{ctrl: ctrl}
	mock.recorder = &MockConsumeFunctionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumeFunction) EXPECT() *MockConsumeFunctionMockRecorder {
	return m.recorder
}

// ErrorInProcessing mocks base method.
func (m *MockConsumeFunction) ErrorInProcessing(message *messaging.Message, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ErrorInProcessing", message, err)
}

// ErrorInProcessing indicates an expected call of ErrorInProcessing.
func (mr *MockConsumeFunctionMockRecorder) ErrorInProcessing(message, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorInProcessing", reflect.TypeOf((*MockConsumeFunction)(nil).ErrorInProcessing), message, err)
}

// Process mocks base method.
func (m *MockConsumeFunction) Process(message *messaging.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Process indicates an expected call of Process.
func (mr *MockConsumeFunctionMockRecorder) Process(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockConsumeFunction)(nil).Process), message)
}
